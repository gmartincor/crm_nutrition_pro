# Generated by Django 4.2.16 on 2025-07-11 10:15

from django.db import migrations, models

def migrate_invoice_data_to_items(apps, schema_editor):
    """Migra los datos de servicio de Invoice a InvoiceItem"""
    Invoice = apps.get_model('invoicing', 'Invoice')
    InvoiceItem = apps.get_model('invoicing', 'InvoiceItem')
    
    for invoice in Invoice.objects.all():
        # Solo crear InvoiceItem si hay datos en los campos antiguos
        if hasattr(invoice, 'service_description') and invoice.service_description:
            InvoiceItem.objects.create(
                invoice=invoice,
                description=invoice.service_description,
                quantity=getattr(invoice, 'quantity', 1),
                unit_price=getattr(invoice, 'unit_price', 0.01),
                vat_rate=getattr(invoice, 'vat_rate', None),
                irpf_rate=getattr(invoice, 'irpf_rate', None),
            )

def reverse_migrate_invoice_data(apps, schema_editor):
    """Reversa: recrea datos en Invoice desde InvoiceItem (solo el primer item)"""
    Invoice = apps.get_model('invoicing', 'Invoice')
    InvoiceItem = apps.get_model('invoicing', 'InvoiceItem')
    
    for invoice in Invoice.objects.all():
        # Tomar el primer item para poblar los campos viejos
        first_item = InvoiceItem.objects.filter(invoice=invoice).first()
        if first_item:
            invoice.service_description = first_item.description
            invoice.quantity = first_item.quantity
            invoice.unit_price = first_item.unit_price
            invoice.vat_rate = first_item.vat_rate
            invoice.irpf_rate = first_item.irpf_rate
            invoice.save()


class Migration(migrations.Migration):

    dependencies = [
        ('invoicing', '0009_add_invoice_item_model'),
    ]

    operations = [
        migrations.RunPython(
            migrate_invoice_data_to_items,
            reverse_migrate_invoice_data
        ),
    ]
