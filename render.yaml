# ==========================================================================        value: /app/media
      
      # Multi-tenant configuration
      - key: TENANT_MODEL
        value: "tenants.Client"
      - key: TENANT_DOMAIN_MODEL
        value: "tenants.Domain"
      
      # Logging
      - key: LOG_FILE
        value: /tmp/django.log
      
      # Email (configurar según proveedor)
      - key: EMAIL_HOST
        value: smtp.gmail.com
      - key: EMAIL_PORT
        value: "587"
      - key: EMAIL_USE_TLS
        value: "True"
      - key: DEFAULT_FROM_EMAIL
        value: noreply@zentoerp.comml - Configuración de servicios para Render
# =============================================================================
# Este archivo define la infraestructura completa para zentoerp.com
# Incluye: Web Service, PostgreSQL, Redis, y configuración de dominios

services:
  # ---------------------------------------------------------------------------
  # Web Service Principal - Django Multi-tenant
  # ---------------------------------------------------------------------------
  - type: web
    name: zentoerp-web
    env: docker
    dockerfilePath: ./Dockerfile
    dockerContext: .
    plan: starter # Cambiar a 'standard' o 'pro' según necesidades
    region: oregon # Cambiar según ubicación de usuarios
    branch: production
    
    # Comandos Docker
    buildCommand: ./scripts/render-deploy.sh
    startCommand: gunicorn --bind 0.0.0.0:$PORT --workers 3 --worker-class sync --max-requests 1000 --max-requests-jitter 100 --timeout 30 --keep-alive 2 --log-level info --access-logfile - --error-logfile - config.wsgi:application
    preDeployCommand: python manage.py migrate && python manage.py collectstatic --noinput && python manage.py createcachetable
    healthCheckPath: /health/
    autoDeploy: true
    
    # Configuración de dominio y subdominios
    domains:
      - zentoerp.com
      - "*.zentoerp.com"  # Wildcard para subdominios multi-tenant
    
    # Variables de entorno para producción
    envVars:
      - key: DJANGO_SETTINGS_MODULE
        value: config.settings.production
      - key: ENVIRONMENT
        value: production
      - key: DEBUG
        value: "False"
      - key: LOAD_TEST_DATA
        value: "False"
      
      # Dominio principal
      - key: ALLOWED_HOSTS
        value: "zentoerp.com,*.zentoerp.com,zentoerp-web.onrender.com"
      
      # Security
      - key: SECRET_KEY
        value: "gkm@5q1^8(y9$^bzcub&b=w#+$x(#x%=wnz$xfj^3gf6oq+3zx"
      
      # Database - usar tus credenciales directamente
      - key: DATABASE_URL
        value: "postgresql://zentoerp_user:b7OCqNrdoVtdSObjiYVcU1BeubLTEWcO@dpg-d1sg1b3ipnbc73e279t0-a/zentoerp_production"
      - key: DB_NAME
        value: "zentoerp_production"
      - key: DB_USER
        value: "zentoerp_user"
      - key: DB_PASSWORD
        value: "b7OCqNrdoVtdSObjiYVcU1BeubLTEWcO"
      - key: DB_HOST
        value: "dpg-d1sg1b3ipnbc73e279t0-a"
      - key: DB_PORT
        value: "5432"
      
      # Cache configuration (sin Redis)
      - key: CACHE_BACKEND
        value: "database"
      
      # Configuración de archivos estáticos
      - key: STATIC_URL
        value: "/static/"
      - key: MEDIA_URL
        value: "/media/"
      - key: STATIC_ROOT
        value: /app/static_collected
      - key: MEDIA_ROOT
        value: /app/media
      
      # Configuración de logs
      - key: LOG_FILE
        value: /tmp/django.log
      
      # Email (configurar según proveedor)
      - key: EMAIL_HOST
        value: smtp.gmail.com
      - key: EMAIL_PORT
        value: "587"
      - key: EMAIL_USE_TLS
        value: "True"
      - key: DEFAULT_FROM_EMAIL
        value: noreply@zentoerp.com
    
    # Secretos sensibles (configurar en Render Dashboard)
    # SECRET_KEY, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD
    
    # Build and Start Commands - Docker
    buildCommand: ./scripts/render-deploy.sh
    startCommand: gunicorn --bind 0.0.0.0:$PORT --workers 3 --worker-class sync --max-requests 1000 --max-requests-jitter 100 --timeout 30 --keep-alive 2 --log-level info --access-logfile - --error-logfile - config.wsgi:application
    preDeployCommand: python manage.py migrate && python manage.py collectstatic --noinput && python manage.py createcachetable
    
    # Health Check
    healthCheckPath: /health/
    
    # Configuración de auto-deploy
    autoDeploy: true

  # ---------------------------------------------------------------------------
  # PostgreSQL Database (ya creado)
  # ---------------------------------------------------------------------------
  # - type: postgres
  #   name: zentoerp-postgres
  #   plan: starter
  #   region: oregon
  #   databaseName: zentoerp_production
  #   databaseUser: zentoerp_user
  #   backupRetentionDays: 7
  #   postgresPlan: starter
    
  # ---------------------------------------------------------------------------
  # Redis Cache (COMENTADO - usando database cache)
  # ---------------------------------------------------------------------------
  # - type: redis
  #   name: zentoerp-redis
  #   plan: starter
  #   region: oregon
  #   maxmemoryPolicy: allkeys-lru
